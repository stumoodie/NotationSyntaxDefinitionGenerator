<project name="CodeGenerator" default="all" basedir=".">
    <description>
        Context adapter class generation project
    </description>
    
    <!-- program version -->
    <property name="version" value="0.9.00" />
    
    <!-- set global properties for this build -->
    <property name="build" location="."/>
    <property name="src" location="src"/>
    <property name="test" location="test"/>
    <property name="classes" location="classes"/>
    <property name="dist" location="dist" />
    <property name="dist.jar" location="${dist}/jar" />
    <property name="docbase.dir" location="docs"/>
    <property name="doc" location="${docbase.dir}/api"/>
	<property name="lib.dir" location="libs"/>
    <property name="grammar" location="grammar"/>
    <property name="jar.name" location="${dist.jar}/${ant.project.name}.jar"/>
	
    <property name="grammar.name" value="ContextTree.g"/>
    <property name="walker.name" value="ContextTreeWalker.g"/>
    <property name="ca.file" value="metabolic.ca"/>
    <property name="package" value="org/pathwayeditor/codegenerator"/>
    <property name="test.package" value="org/pathwayeditor/codegenerator/test"/>
	<property name="main.class" value="org.pathwayeditor.codegenerator.SyntaxDefinitionGenerator"/>
    <property name="test.package.dir" value="${test}/${test.package}" />
	<property name="test.defn.file" value="test.ca" />
	
    <!-- where to write/find token files -->
    <property name="token.lib" location="${src}/${package}" />

    <!-- antlr options -->
    <property name="profile" value="false" />
    <property name="report" value="true" />
    <property name="multithreaded" value="true" />
    <property name="depend" value="true" />
	<property name="antlr" value="${lib.dir}/antlr/lib"/>

	<path id="buildclasspath">
		<pathelement location="${lib.dir}/antlr-3.1.2/lib/antlr-2.7.7.jar"/>
		<pathelement location="${lib.dir}/antlr-3.1.2/lib/antlr-3.1.2.jar" />
		<pathelement location="${lib.dir}/antlr-3.1.2/lib/stringtemplate-3.2.jar" />
		<pathelement location="${lib.dir}/antlr-3.1.2/lib/runtime-3.1.2.jar" />
		<pathelement location="${lib.dir}/jopt-simple-3.0.1/jopt-simple-3.0.1.jar" />
	</path>
	
	<path id="test.classpath">
		<path refid="buildclasspath" />
		<pathelement location="${lib.dir}/easymock2.4/easymock.jar"/>
		<pathelement location="${lib.dir}/junit4.5/junit-4.5.jar"/>
		<pathelement location="${lib.dir}/ToolKit/toolkit.jar"/>
		<pathelement location="${lib.dir}/BusinessObjects/BusinessObjects.jar"/>
	</path>

	<target name="init">
        <!-- Create the time stamp -->
        <tstamp />
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${grammar}" />
        <mkdir dir="${classes}" />
    </target>

    <macrodef name="antlr3">
       <attribute name="grammar.name"/>
       <attribute name="package" default="${package}"/>
       <sequential>
              <echo message="antlr ${grammar}/@{grammar.name}" />
              <antlr:antlr3 xmlns:antlr="antlib:org/apache/tools/ant/antlr" 
                  target="${grammar}/@{grammar.name}" 
                  outputdirectory="${src}/@{package}"
                  libdirectory="${src}/@{package}"
                  multithreaded="${multithreaded}"
                  report="${report}"
                  depend="${depend}"
                  profile="${profile}">
              	<classpath refid="buildclasspath"/>
              </antlr:antlr3>
        </sequential>
    </macrodef>
    
    <target name="grammar" depends="init">
       <antlr3 grammar.name="${grammar.name}"/>
    </target>
    
    <target name="walker" depends="init">
       <antlr3 grammar.name="${walker.name}"/>
    </target>


    <target name="compile" depends="grammar,walker,init" description="compile">
        <!-- Compile the java code from ${src} into ${classes} -->
        <javac debug="true" srcdir="${src}" destdir="${classes}"             
               listfiles="Yes" deprecation="Yes" excludes="**/*SyntaxService.java" >
            <compilerarg value="-Xlint:unchecked"/>
        	<classpath refid="buildclasspath"/>
        </javac>
		<copy todir="${classes}">
			<fileset dir="${src}">
				<exclude name="**/*.java" />
				<exclude name="**/*.class" />
			</fileset>
		</copy>
    </target>

    <target name="dist" depends="compile,init" description="generate for distribution">
    	<mkdir dir="${dist.jar}" />
        <jar destfile="${jar.name}" filesetmanifest="mergewithoutmain">
                <manifest>
                        <attribute name="Built-By" value="${user.name}"/>
                        <attribute name="Main-Class" value="${main.class}" />
                        <attribute name="Class-Path" value=".:org/pathwayeditor/codegenerator" />
                </manifest>
                <fileset dir="${classes}" />
				<zipfileset excludes="META-INF/*.SF" src="${lib.dir}/antlr-3.1.2/lib/antlr-2.7.7.jar"/>
        		<zipfileset excludes="META-INF/*.SF" src="${lib.dir}/antlr-3.1.2/lib/antlr-3.1.2.jar" />
        		<zipfileset excludes="META-INF/*.SF" src="${lib.dir}/antlr-3.1.2/lib/stringtemplate-3.2.jar" />
        		<zipfileset excludes="META-INF/*.SF" src="${lib.dir}/antlr-3.1.2/lib/antlr-runtime-3.1.2.jar" />
	    		<zipfileset excludes="META-INF/*.SF" src="${lib.dir}/jopt-simple-3.0.1/jopt-simple-3.0.1.jar" />
        </jar>
    </target>

	<target name="test-class" depends="dist" description="creates the test class for unit testing">
		<java jar="${jar.name}" fork="true" maxmemory="256m">
			<arg value="-t" />
			<arg value="${test.package.dir}" />
			<arg file="${test.defn.file}" />
		</java>
	</target>
	
    <target name="compile-test" depends="compile,test-class" description="compile">
        <!-- Compile the java code from ${src} into ${classes} -->
        <javac debug="true" srcdir="${test}" destdir="${classes}"             
               listfiles="Yes" deprecation="Yes" >
            <compilerarg value="-Xlint:unchecked"/>
        	<classpath refid="test.classpath"/>
        </javac>
		<copy todir="${classes}">
			<fileset dir="${test}">
				<exclude name="**/*.java" />
				<exclude name="**/*.class" />
			</fileset>
		</copy>
    </target>

	<target name="test" depends="compile-test">
		<delete dir="${dist}/test/logs" />
		<mkdir dir="${dist}/test/logs" />
		<junit printsummary="yes" haltonfailure="no" fork="yes" forkmode="perBatch">
			<classpath>
				<path refid="test.classpath" />
				<pathelement location="${classes}" />
			</classpath>
			<batchtest todir="${dist}/test/logs">
				<formatter type="xml" />
				<fileset dir="${classes}">
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>

		<!-- clean report directory -->
		<delete dir="${dist}/test/junitReports" />
		<mkdir dir="${dist}/test/junitReports" />

		<!-- generate report -->
		<junitreport todir="${dist}/test/junitReports">
			<fileset dir="${dist}/test/logs" includes="**/*.xml" />
			<report todir="${dist}/test/junitReports" />
		</junitreport>
	</target>

    <target name="doc" description="generate documentation">
       <javadoc destdir="${doc}"
                author="true"
                version="true"
                use="true"
                windowtitle="${ant.project.name}"
                sourcepath="${src}"
                Protected="All" Private="All"
                Public="All"
                Locale="de"
                linksource="yes"
                breakiterator="Yes">
       </javadoc>
    </target>

    <target name="clean" description="clean up">
       <delete failonerror="false">
          <fileset dir="${src}" 
                includes="**/*.class,**/*.tokens,**/*.g*" />
       	  <fileset dir="${src}/${package}" includes="ContextTree*.java"/> 
     	  <fileset dir="${test}/org/pathwayeditor/codegenerator/test" includes="TestNotationSyntaxService.java"/> 
     	  <fileset dir="." includes="*.dot"/> 
       </delete>
    	<delete dir="${classes}" />
    	<delete dir="${dist}"/>
        <delete dir="${docbase.dir}" />
    </target>
    
    <target name="all" depends="dist, doc" description="create a distribution and javadocs"/>
            
</project>
