group Java; 

constant_decl(id, base_idx, cnt) ::=<<
public static final int OT_<id> = <base_idx> + <cnt>;
>>

syntaxServiceClass(notation_id, root, labels, prop_defns, shapes, links, anchor_nodes, parenting) ::=<<
package <notation_id.pn>;

import java.math.BigDecimal;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.pathwayeditor.businessobjects.drawingprimitives.attributes.LineStyle;
import org.pathwayeditor.businessobjects.drawingprimitives.attributes.LinkEndDecoratorShape;
import org.pathwayeditor.businessobjects.drawingprimitives.properties.IPropertyDefinition;
import org.pathwayeditor.businessobjects.notationsubsystem.INotationSubsystem;
import org.pathwayeditor.businessobjects.notationsubsystem.INotationSyntaxService;
import org.pathwayeditor.businessobjects.typedefn.ILinkObjectType.LinkEditableAttributes;
import org.pathwayeditor.businessobjects.typedefn.ILinkTerminusDefinition.LinkTermEditableAttributes;
import org.pathwayeditor.businessobjects.typedefn.INodeObjectType;
import org.pathwayeditor.businessobjects.typedefn.IObjectType;
import org.pathwayeditor.businessobjects.typedefn.IShapeObjectType;
import org.pathwayeditor.codegenerator.runtime.CommonSyntaxService;
import org.pathwayeditor.codegenerator.runtime.IObjectTypeConstructor;
import org.pathwayeditor.codegenerator.runtime.IPropertyDefinitionConstructor;
import org.pathwayeditor.figure.geometry.Dimension;
import org.pathwayeditor.figure.rendering.GenericFont;
import org.pathwayeditor.figure.rendering.IFont;
import org.pathwayeditor.notationsubsystem.toolkit.definition.AnchorNodeObjectType;
import org.pathwayeditor.notationsubsystem.toolkit.definition.IntegerPropertyDefinition;
import org.pathwayeditor.notationsubsystem.toolkit.definition.LabelObjectType;
import org.pathwayeditor.notationsubsystem.toolkit.definition.LinkConnectionRules;
import org.pathwayeditor.notationsubsystem.toolkit.definition.LinkObjectType;
import org.pathwayeditor.notationsubsystem.toolkit.definition.NumberPropertyDefinition;
import org.pathwayeditor.notationsubsystem.toolkit.definition.ObjectTypeParentingRules;
import org.pathwayeditor.notationsubsystem.toolkit.definition.PlainTextPropertyDefinition;
import org.pathwayeditor.notationsubsystem.toolkit.definition.RootObjectType;
import org.pathwayeditor.notationsubsystem.toolkit.definition.ShapeObjectType;

public class <notation_id.short_name>NotationSyntaxService extends CommonSyntaxService implements INotationSyntaxService {
  private static final int SHAPE_BASE_IDX = 10000;
  private static final int ANCHOR_NODE_BASE_IDX = 20000;
  private static final int LINK_BASE_IDX = 30000;
  private static final int LABEL_BASE_IDX = 40000;
  <root:{s |public static final int OT_<s.id> = 0;}>
  <shapes:{s | <constant_decl(id=s.id, base_idx="SHAPE_BASE_IDX", cnt=i)>}; separator="\n">
  <anchor_nodes:{s |<constant_decl(id=s.id, base_idx="ANCHOR_NODE_BASE_IDX", cnt=i)>};separator="\n">
  <labels:{s |<constant_decl(id=s.id, base_idx="LABEL_BASE_IDX", cnt=i)>};separator="\n">
  <links:{s |<constant_decl(id=s.id, base_idx="LINK_BASE_IDX", cnt=i)>};separator="\n">


  public <notation_id.short_name>NotationSyntaxService(INotationSubsystem serviceProvider) {
    super(serviceProvider);

    final Map\<String, IPropertyDefinition\> propDefns = new HashMap\<String, IPropertyDefinition\>();
    List\<IPropertyDefinitionConstructor\> propConstructors = new LinkedList\<IPropertyDefinitionConstructor\>();
    <prop_defns; separator="\n\n">

    <root>

    //shapes
    List\<IObjectTypeConstructor\<ShapeObjectType\>\> shapeConstructors = new LinkedList\<IObjectTypeConstructor\<ShapeObjectType\>\>();
    <shapes; separator="\n\n">

    // anchor nodes
    List\<IObjectTypeConstructor\<AnchorNodeObjectType\>\> anchorNodeConstructors = new LinkedList\<IObjectTypeConstructor\<AnchorNodeObjectType\>\>();
    <anchor_nodes; separator="\n\n">

    //labels
    List\<IObjectTypeConstructor\<LabelObjectType\>\> labelConstructors = new LinkedList\<IObjectTypeConstructor\<LabelObjectType\>\>();
    <labels; separator="\n\n">

    //links
    List\<IObjectTypeConstructor\<LinkObjectType\>\> linkConstructors = new LinkedList\<IObjectTypeConstructor\<LinkObjectType\>\>();
    <links; separator="\n\n">

    super.initialise(rootConstructor, shapeConstructors, anchorNodeConstructors, labelConstructors, linkConstructors, propConstructors);		
  }

  <!prop_defns; separator="\n\n"!>

  @Override
  protected void defineParenting() {
    <parenting; separator="\n">
  }

  private void defineHierarchy(int parentNodeId, int ... childNodeIds){
    IObjectType srcNode = getObjectType(parentNodeId);
    ObjectTypeParentingRules rules = (ObjectTypeParentingRules)srcNode.getParentingRules();
    for(int childId : childNodeIds){ 
      rules.addChild(getObjectType(childId));
    }
  }

  private void defineConnection(LinkConnectionRules connRules, int srcNodeId, int ... tgtNodeIds){
    INodeObjectType srcNode = (INodeObjectType)getObjectType(srcNodeId);
    for(int tgt : tgtNodeIds){ 
	  INodeObjectType tgtNode = (INodeObjectType)getObjectType(tgt);
      connRules.addConnection(srcNode, tgtNode);
    }
  }

}

>>

notation_id(pn, qn, short_name, name, description, major, minor, patch) ::= <<
GeneralNotation("<qn>", <name>, <description>, new Version(<major>, <minor>, <patch>)); 
>>

root(id) ::= <<
IObjectTypeConstructor\<RootObjectType\> rootConstructor = new IObjectTypeConstructor\<RootObjectType\>() {
  @Override
  public RootObjectType create() {
    RootObjectType retVal = new RootObjectType(OT_<id>, SimpleNotationSyntaxService.this);
    return retVal;
  }
};
>>

label(id, name, descr, format, node_defn, font_defn, line_defn) ::= <<
labelConstructors.add(new IObjectTypeConstructor\<LabelObjectType\>() {
      @Override
      public LabelObjectType create() {
        LabelObjectType retVal = new LabelObjectType(<notation_id.short_name>NotationSyntaxService.this, OT_<id>, <name>);
        <if(descr)>
        retVal.setDescription(<descr>);
        <endif>
        <if(format)>
        // Formats not used here.
        //retVal.setDisplayFormat(<format>);
        <endif>
        <node_defn>
        <font_defn>
        <line_defn>
        return retVal;
      }
    });
>>

node_defn(fig_defn, node_size, colour) ::=<<
retVal.getDefaultAttributes().setShapeDefinition(<fig_defn>);
retVal.getDefaultAttributes().setSize(<node_size>);
retVal.getDefaultAttributes().setFillColour(<colour>);
>>

label_node_defn(fig_defn, node_size, colour) ::=<<
retVal.getDefaultAttributes().setMinimumSize(<node_size>);
retVal.getDefaultAttributes().setFillColour(<colour>);
>>

font_defn(colour, style, pitch) ::=<<
retVal.getDefaultAttributes().setFontColour(<colour>);
retVal.getDefaultAttributes().setFont(new GenericFont(<pitch>, <style>));
>>

line_defn(style, width, colour) ::=<<
retVal.getDefaultAttributes().setLineColour(<colour>);
retVal.getDefaultAttributes().setLineStyle(<style>);
retVal.getDefaultAttributes().setLineWidth(<width>);
>>


shape(id, name, descr, node_defn, font_defn, line_defn, prop_defn) ::= <<
shapeConstructors.add(new IObjectTypeConstructor\<ShapeObjectType\>() {
      @Override
      public ShapeObjectType create() {
        ShapeObjectType retVal = new ShapeObjectType(<notation_id.short_name>NotationSyntaxService.this, OT_<id>, <name>);
        <if(descr)>
        retVal.setDescription(<descr>);
        <endif>
        retVal.setEditableAttributes(EnumSet.allOf(IShapeObjectType.EditableShapeAttributes.class));
        <node_defn>
        <font_defn>
        <line_defn>
        <prop_defn>
        return retVal;
      }
    });
>>

anchor_node(id, name, descr, node_defn, font_defn, line_defn) ::= <<
anchorNodeConstructors.add(new IObjectTypeConstructor\<AnchorNodeObjectType\>() {
      @Override
      public AnchorNodeObjectType create() {
        AnchorNodeObjectType retVal = new AnchorNodeObjectType(<notation_id.short_name>NotationSyntaxService.this, OT_<id>, <name>);
        <if(descr)>
        retVal.setDescription(<descr>);
        <endif>
        <node_defn>
        <font_defn>
        <line_defn>

        return retVal;
      }
    });
>>

link(id, name, descr, line_defn, ports, prop_defn, connections) ::= <<
linkConstructors.add(new IObjectTypeConstructor\<LinkObjectType\>() {
      @Override
      public LinkObjectType create() {
        LinkObjectType retVal = new LinkObjectType(<notation_id.short_name>NotationSyntaxService.this, OT_<id>, <name>);
        <if(descr)>
        retVal.setDescription(<descr>);
        <endif>
        retVal.setEditableAttributes(EnumSet.allOf(LinkEditableAttributes.class));
        <line_defn>
        
        // define termini
        <ports; separator="\n\n">
        
        // assign property definitions to the link OT
        <prop_defn>
        
        // define valid link connections
        LinkConnectionRules connRules = retVal.getLinkConnectionRules();
        <connections; separator="\n">
        
        return retVal;
      }
    });
>>

term_map ::= [
  "source":"Source",
  "target":"Target"
]


port(type, arrow_style, gap, size) ::= <<
retVal.get<term_map.(type)>TerminusDefinition().setEditableAttributes(EnumSet.allOf(LinkTermEditableAttributes.class));
retVal.get<term_map.(type)>TerminusDefinition().getDefaultAttributes().setEndSize(<size>);
retVal.get<term_map.(type)>TerminusDefinition().getDefaultAttributes().setGap(<gap>);
retVal.get<term_map.(type)>TerminusDefinition().getDefaultAttributes().setEndDecoratorType(LinkEndDecoratorShape.<arrow_style>);
>>

node_size(w, h) ::= <<
  new Dimension(<w>, <h>)
>>

line_style(style) ::= "LineStyle.<style>"

number(val) ::="<val>"

colour(hex_num) ::= <<
getColour("<hex_num>")
>>

string_lit(val) ::= "<val>"

prop_defn(prop_refs) ::=<<
<prop_refs:prop_ref(); separator="\n">
>>

prop_ref(id) ::= <<
retVal.getDefaultAttributes().addPropertyDefinition(propDefns.get("<id>"));
>>


define_text_prop(id, name, descr, label_id, value) ::= <<
propConstructors.add(new IPropertyDefinitionConstructor(){
      @Override
      public IPropertyDefinition create() {
        PlainTextPropertyDefinition name = new PlainTextPropertyDefinition(<name>, <value>);
        name.setDisplayName(<descr>);
        name.setEditable(true);
        <if(label_id)>
        defineVisProp(name, OT_<label_id>);
        <endif>
        propDefns.put("<id>", name);
        return name;
      }
});
>>

define_real_prop(id, name, descr, label_id, value) ::= <<
propConstructors.add(new IPropertyDefinitionConstructor(){
      @Override
      public IPropertyDefinition create() {
       NumberPropertyDefinition name = new NumberPropertyDefinition(<name>, new BigDecimal(<value>));
       name.setDisplayName(<descr>);
       name.setEditable(true);
       <if(label_id)>
       defineVisProp(name, OT_<label_id>);
       <endif>
       propDefns.put("<id>", name);
       return name;
      }
});
>>

define_int_prop(id, name, descr, label_id, value) ::= <<
propConstructors.add(new IPropertyDefinitionConstructor(){
      @Override
      public IPropertyDefinition create() {
    IntegerPropertyDefinition name = new IntegerPropertyDefinition(<name>, <value>);
    name.setDisplayName(<descr>);
    name.setEditable(true);
    <if(label_id)>
    defineVisProp(name, OT_<label_id>);
    <endif>
       propDefns.put("<id>", name);
    return name;
   }
});
>>

define_bool_prop(id, name, descr, label_id, value) ::= <<
propConstructors.add(new IPropertyDefinitionConstructor(){
      @Override
      public IPropertyDefinition create() {
    BooleanPropertyDefinition name = new BooleanPropertyDefinition(<name>, <value>);
    name.setDisplayName(<descr>);
    name.setEditable(true);
    <if(label_id)>
    defineVisProp(name, OT_<label_id>);
    <endif>
       propDefns.put("<id>", name);
    return name;
   }
});
>>


define_connection(src, tgts) ::= <<
defineConnection(connRules, OT_<src>, OT_<tgts; separator=", OT_">); 
>>

define_hierarchy(parent, children) ::= <<
defineHierarchy(OT_<parent>, OT_<children; separator=", OT_">);
>>

font_style(style) ::= "EnumSet.of(IFont.Style.<style>)"

font_pitch(pitch) ::= "<pitch>"

format(text) ::= "<text>"

