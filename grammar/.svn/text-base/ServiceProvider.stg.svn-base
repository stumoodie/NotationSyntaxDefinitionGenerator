group ServiceProvider implements ContextTreeTemplate; 

contexClass(id,pack,pn,name,desc,ver, rmo,slist,llist,prop,sh,li) ::=<<
###<pn>/src/<pack>/<id>ContextAdapterServiceProvider.java
package <pn>;

import java.util.Collections;
import java.util.Set;

import org.pathwayeditor.contextadapter.publicapi.IContext;
import org.pathwayeditor.contextadapter.publicapi.IContextAdapterAutolayoutService;
import org.pathwayeditor.contextadapter.publicapi.IContextAdapterConversionService;
import org.pathwayeditor.contextadapter.publicapi.IContextAdapterExportService;
import org.pathwayeditor.contextadapter.publicapi.IContextAdapterImportService;
import org.pathwayeditor.contextadapter.publicapi.IContextAdapterPluginService;
import org.pathwayeditor.contextadapter.publicapi.IContextAdapterServiceProvider;
import org.pathwayeditor.contextadapter.publicapi.IContextAdapterValidationService;
import org.pathwayeditor.contextadapter.toolkit.ctxdefn.GeneralContext;

public class <id>ContextAdapterServiceProvider implements IContextAdapterServiceProvider {
	private static final String GLOBAL_ID = "<pn>.<id>";
	private static final String DISPLAY_NAME = <desc>;
	private static final String NAME = <name>;
	private static final int[] VERS = getVersion("<ver>");
	
	private static int[] getVersion(String ver) {
		String[] l = ver.split("_");
		int majorVersion = Integer.parseInt(l[0]);
		int minorVersion = Integer.parseInt(l[1]);
		int patchVersion = Integer.parseInt(l[2]);

		return new int[] { majorVersion, minorVersion, patchVersion };
	}
	private <id>ContextAdapterSyntaxService syntaxService;
	private <id>ContextValidationService validationService;
	private IContext context;

	public <id>ContextAdapterServiceProvider() {
		this.context = new GeneralContext(GLOBAL_ID, DISPLAY_NAME, NAME,
				VERS[0], VERS[1], VERS[2]);
		this.syntaxService = new <id>ContextAdapterSyntaxService(this);
		this.validationService=new <id>ContextValidationService(this);
	}
	

	public IContext getContext() {
		return this.context;
	}

	public Set\<IContextAdapterExportService\> getExportServices() {
		return Collections.emptySet();
	}

	public Set\<IContextAdapterImportService\> getImportServices() {
		return Collections.emptySet();
	}

	public Set\<IContextAdapterPluginService\> getPluginServices() {
		return Collections.emptySet();
	}

	public <id>ContextAdapterSyntaxService getSyntaxService() {
		return this.syntaxService;
	}

	public IContextAdapterValidationService getValidationService() {
		return validationService;
	}

	public Set\<IContextAdapterConversionService\> getConversionServices() {
		return Collections.emptySet();
	}

	public IContextAdapterAutolayoutService getAutolayoutService() {
		return new DefaultAutolayoutService();
	}


	private class DefaultAutolayoutService implements IContextAdapterAutolayoutService {

		public IContext getContext() {
			return context;
		}

		public boolean isImplemented() {
			return false;
		}
		public IContextAdapterServiceProvider getServiceProvider() {
			return <id>ContextAdapterServiceProvider.this;
		}
		
	}
}
###<pn>/src/<pack>/<id>ContextValidationService.java
package <pn>;

import java.util.ArrayList;
import java.util.List;

import org.pathwayeditor.businessobjectsAPI.IMap;
import org.pathwayeditor.contextadapter.publicapi.IContext;
import org.pathwayeditor.contextadapter.publicapi.IContextAdapterServiceProvider;
import org.pathwayeditor.contextadapter.publicapi.IContextAdapterValidationService;
import org.pathwayeditor.contextadapter.publicapi.IValidationRuleDefinition;

	public class <id>ContextValidationService implements IContextAdapterValidationService {

	private IContext context;
	private List\<String\> validationReport=new ArrayList\<String\>();
	private boolean beenValidated = false;
	private boolean mapValid = true;
	private boolean hasWarnings = false;
	private boolean readyToValidate = false;
	private IMap mapToValidate;

	public <id>ContextValidationService(IContextAdapterServiceProvider provider) {
		this.serviceProvider=provider;
		context=provider.getContext();
	}
	private IContextAdapterServiceProvider serviceProvider;

	public IContextAdapterServiceProvider getServiceProvider() {
		return serviceProvider;
	}


		public IContext getContext() {
			return context;
		}

		public IMap getMapBeingValidated() {
			throw new UnsupportedOperationException("Validation service has not been implemented for this context adapter");
		}

		public IValidationReport getValidationReport() {
			throw new UnsupportedOperationException("Validation service has not been implemented for this context adapter");
		}

		public boolean hasMapBeenValidated() {
			throw new UnsupportedOperationException("Validation service has not been implemented for this context adapter");
		}

		public boolean hasWarnings() {
			throw new UnsupportedOperationException("Validation service has not been implemented for this context adapter");
		}

		public boolean isImplemented() {
			return false;
		}

		public boolean isMapValid() {
			throw new UnsupportedOperationException("Validation service has not been implemented for this context adapter");
		}

		public boolean isReadyToValidate() {
			throw new UnsupportedOperationException("Validation service has not been implemented for this context adapter");
		}

		public void setMapToValidate(IMap mapToValidate) {
			throw new UnsupportedOperationException("Validation service has not been implemented for this context adapter");
		}

		public void validateMap() {
			throw new UnsupportedOperationException("Validation service has not been implemented for this context adapter");
		}
		
		public List\<IValidationRuleDefinition\> getRules() {
			return null;
		}
		
	}
###<pn>/src/<pack>/plugin/Activator.java
package <pn>.plugin;

import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;

/**
 * The activator class controls the plug-in life cycle
 */
public class Activator extends AbstractUIPlugin {

	// The plug-in ID
	public static final String PLUGIN_ID = "<pn>.<id>";

	// The shared instance
	private static Activator plugin;
	
	/**
	 * The constructor
	 */
	public Activator() {
	}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)
	 */
	public void start(BundleContext context) throws Exception {
		super.start(context);
		plugin = this;
	}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
	 */
	public void stop(BundleContext context) throws Exception {
		plugin = null;
		super.stop(context);
	}

	/**
	 * Returns the shared instance
	 *
	 * @return the shared instance
	 */
	public static Activator getDefault() {
		return plugin;
	}

}

###<pn>/META-INF/MANIFEST.MF
Manifest-Version: 1.0
Bundle-ManifestVersion: 2
Bundle-Name: <id> Context Plug-in
Bundle-SymbolicName: <pn>.<id>;singleton:=true
Bundle-Version: 1.0.0
Bundle-Activator: <pn>.plugin.Activator
Require-Bundle: org.eclipse.ui,
 org.eclipse.core.runtime,
 org.pathwayeditor.application;bundle-version="0.8.1"
Eclipse-LazyStart: true

###<pn>/build.properties
source.. = src/
output.. = bin/
bin.includes = META-INF/,\
               .,\
               plugin.xml

###<pn>/plugin.xml
\<?xml version="1.0" encoding="UTF-8"?\>
\<?eclipse version="3.2"?\>
\<plugin\>
   \<extension
         id="<pn>.<id>ContextAdapter"
         name=<name>
         point="org.pathwayeditor.application.contextAdapters"\>
      \<context
            class="<pn>.<id>ContextAdapterServiceProvider"\>
      \</context\>
   \</extension\>

\</plugin\>

###<pn>/.project
\<?xml version="1.0" encoding="UTF-8"?\>
\<projectDescription\>
	\<name\><pn>\</name\>
	\<comment>\</comment\>
	\<projects\>
	\</projects\>
	\<buildSpec\>
		\<buildCommand\>
			\<name\>org.eclipse.jdt.core.javabuilder\</name\>
			\<arguments\>
			\</arguments\>
		\</buildCommand\>
		\<buildCommand\>
			\<name\>org.eclipse.pde.ManifestBuilder\</name\>
			\<arguments\>
			\</arguments\>
		\</buildCommand\>
		\<buildCommand\>
			\<name\>org.eclipse.pde.SchemaBuilder\</name\>
			\<arguments\>
			\</arguments\>
		\</buildCommand\>
	\</buildSpec\>
	\<natures\>
		\<nature\>org.eclipse.jdt.core.javanature\</nature\>
		\<nature\>org.eclipse.pde.PluginNature\</nature\>
	\</natures\>
\</projectDescription\>

###<pn>/.classpath
\<?xml version="1.0" encoding="UTF-8"?\>
\<classpath\>
	\<classpathentry kind="src" path="src"/\>
	\<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/\>
	\<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/\>
	\<classpathentry combineaccessrules="false" kind="src" path="/EPE2_new"/\>
	\<classpathentry kind="output" path="bin"/\>
\</classpath\>

>>
/**
 *
 */
rgbT(rgb) ::=""

/**
 *
 */
hexT(rgb) ::=""

/**
 * Exception list definition like
 * <pre>
 * ![A,B,C]  
 * </pre>
 * in shape definition
 */
addAllExcept(main,remove) ::=""

/**
 * Exact list definition like
 * <pre>
 * [A,B,C]  
 * </pre>
 * in shape definition
 */
addList(list) ::=""

/**
 * Empty valid children list definition like
 * <pre>
 * contains []  
 * </pre>
 * in shape definition
 */
containsNone(shape) ::=""

/**
 * Define nonempty children list like
 * <pre>
 * contains [A,B,C]  
 * </pre>
 * in shape definition
 */
containsList(shape,list) ::=""

/**
 * Definition of connectivity constraints like
 * <pre>
 * source = Process target = [Compound]  
 * </pre>
 * in link definition
 */
endDef(id,src,list) ::=""

/**
 *
 */
version(ver) ::= "getVersion(\"<ver>\")"

//setName(name) ::= ".setName(<name>)"
setName(name) ::= "<name>"

//setDescription(descr) ::=".setDescription(<descr>)"
setDescription(descr) ::="<descr>"

/**
 * Basic shape definition
 */
defineShape(id,name,desc,sd,up,cont,lw,ls,lc,ilw,ils,ilc,ist,iss,isc) ::=""

/**
 * Basic link definition
 */
defineLink(id,name,desc,sd,up,port,ends,lw,ls,lc,ilw,ils,ilc,ist,iss,isc) ::=""

/**
 * definition f line properties like line width, style and colour
 */
setLineProp() ::=""

/**
 * shape type definition
 */
setShapeType(id,type) ::=""

/**
 * shape fill colour definition
 */
setFillProperty(id,colour) ::=""

/**
 * size definition
 */
setSize(id,size) ::=""

/**
 * arrow head offset definition
 */
offset(pt,v) ::=""

/**
 * Port description
 */
port(def) ::=""

/**
 * RMO definition
 */
rmo(up,cont) ::=""

/**
 * Port definition
 */
portDef(pt,ast,asz,ofs,st,ss,sc,lw,ls,lc,up,ilw,ils,ilc,ist,iss,isc) ::=""

/**
 * Global property definition for reuse in several objects
 */
globalProperty(id,name,desc,def,val,ise,isv) ::=""

/**
 * Local property definition for use in particular object
 */
localProperty(obj,id,name,desc,def,val,ise,isv) ::=""

/**
 * Simple property type (ASCII string)
 */
 simpleType() ::=""
 
/**
 * RichText property type (HTML string)
 */
 richType() ::=""
 
/**
 * Number property type 
 */
 numberType() ::=""
 
/**
 * Assigns new value to globally defined property
 */
 assignVal(obj,id,val,ise,isv) ::=""
 
/**
 * Assigns new value to standard predefined property, like "Name" or URL
 */
 assignPredef(obj,id,val,ise,isv) ::=""