tree grammar Metabolic_DOM;
options {
	tokenVocab=ContextTree;
	ASTLabelType=CommonTree;
	output=template;
}
tokens {
	VALUE;
	VLIST;
	PROP_LIST;
	SHAPE_LIST;
	LINK_LIST;
	DEFAULT_COMPARTMENT;
}

//utility rules

nodeDescription
	:	 ID name description? detDescription?;

name 	:	^('name' Text) 
	; //Name does not require to be single world  

description
	:	^('description' Text) 
	;

detDescription
	:	^('detDescription' Text) 
	;

connection
	:	^('to' ID) ^('via' ID)
	;


/*
*/
diagram	:	^(nodeDescription shapeList linkList);

shapeList
	:	^(SHAPE_LIST (compartment+|defCompartment) reactions);
	
defCompartment
	:	^(DEFAULT_COMPARTMENT compartment* compound* macromolecules*);
	
compartment
	:	^('compartment' nodeDescription compartment* compound* macromolecules*);

	
compound:	^('compound' nodeDescription compoundProps);

compoundProps
	:	^(PROP_LIST ^('URL' propValue) ^('CID' propValue) ^('ChEBI' propValue) ^('PubChem' propValue) ^('InChI' propValue) ^('Smiles' propValue) ^('IC' propValue))
	;
	
propValue 
	:	^(VALUE (Text
	|	EMPTY_STR
	|	DOUBLE))
	;


macromolecules
	:	^('macromolecule' nodeDescription compound* macromolecules* macromolProp)
	;

macromolProp
	:	^(PROP_LIST ^('URL' propValue) ^('GOTerm' propValue) ^('UniProt' propValue))
	;



reactions
	:	^('reaction' substrates products modifiers reactProp)
	;

substrates
	:	^(LINK_LIST (^('consumption' connection))+)
	;

products
	:	^(LINK_LIST (^('production' connection))+)
	;

modifiers
	:	^(LINK_LIST catalysis? activator* inhibitor*) 
	;

catalysis
	:	^('catalysis' connection)
	;

activator
	:	^('activator' connection)
	;

inhibitor
	:	^('inhibitor' connection)
	;

reactProp
	:	^(PROP_LIST ^('URL' propValue) ^('Reversibility' propValue) ^('KineticLaw' propValue) ^('ECnum' propValue) )
	;



linkList
	: ^(LINK_LIST consumptionLink* productionLink* catalysisLink* activationLink* inhibitionLink* )
	;

consumptionLink
	:
	;

productionLink
	:
	;

catalysisLink
	:
	;

activationLink
	:
	;

inhibitionLink
	:
	;


